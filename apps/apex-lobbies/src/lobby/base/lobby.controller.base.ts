/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LobbyService } from "../lobby.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LobbyCreateInput } from "./LobbyCreateInput";
import { Lobby } from "./Lobby";
import { LobbyFindManyArgs } from "./LobbyFindManyArgs";
import { LobbyWhereUniqueInput } from "./LobbyWhereUniqueInput";
import { LobbyUpdateInput } from "./LobbyUpdateInput";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { TeamWhereUniqueInput } from "../../team/base/TeamWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LobbyControllerBase {
  constructor(
    protected readonly service: LobbyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lobby })
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLobby(@common.Body() data: LobbyCreateInput): Promise<Lobby> {
    return await this.service.createLobby({
      data: data,
      select: {
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Lobby] })
  @ApiNestedQuery(LobbyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async lobbies(@common.Req() request: Request): Promise<Lobby[]> {
    const args = plainToClass(LobbyFindManyArgs, request.query);
    return this.service.lobbies({
      ...args,
      select: {
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lobby })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async lobby(
    @common.Param() params: LobbyWhereUniqueInput
  ): Promise<Lobby | null> {
    const result = await this.service.lobby({
      where: params,
      select: {
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lobby })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLobby(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() data: LobbyUpdateInput
  ): Promise<Lobby | null> {
    try {
      return await this.service.updateLobby({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          password: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lobby })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLobby(
    @common.Param() params: LobbyWhereUniqueInput
  ): Promise<Lobby | null> {
    try {
      return await this.service.deleteLobby({
        where: params,
        select: {
          createdAt: true,
          id: true,
          password: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/teams")
  @ApiNestedQuery(TeamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async findTeams(
    @common.Req() request: Request,
    @common.Param() params: LobbyWhereUniqueInput
  ): Promise<Team[]> {
    const query = plainToClass(TeamFindManyArgs, request.query);
    const results = await this.service.findTeams(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isConfirmed: true,

        lobby: {
          select: {
            id: true,
          },
        },

        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async connectTeams(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        connect: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async updateTeams(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        set: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async disconnectTeams(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        disconnect: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: LobbyWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        discordAccount: true,
        eaAccount: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,

        lobby: {
          select: {
            id: true,
          },
        },

        roles: true,
        steamAccount: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: LobbyWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateLobby({
      where: params,
      data,
      select: { id: true },
    });
  }
}
